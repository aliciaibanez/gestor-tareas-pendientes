#BlueJ class context
comment0.target=GestorTareas
comment1.params=
comment1.target=GestorTareas()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ GestorTareas\r\n
comment10.params=
comment10.target=java.lang.String\ getTareasEnUnaSolaLinea()
comment10.text=\r\n\ Metodo\ 'getTareasEnUnaSolaLinea'\ que\ devuelve\ todas\ las\ tareas\ pendientes\ en\ una\ sola\ \r\n\ linea\ separadas\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corchetes\ al\ inicio\ y\ al\ final\r\n\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3]".\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ "[]".\ \r\n
comment11.params=
comment11.target=void\ imprimirTareasEnUnaSolaLinea()
comment11.text=\r\n\ Metodo\ 'imprimirTareasEnUnaSolaLinea'\ que\ imprime\ todas\ las\ tareas\ pendientes\ en\ una\ sola\ \r\n\ linea\ separadas\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corcehete\ al\ inicio\ y\ al\ final\r\n\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3].\ Si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\ con\ dos\ corchetes\ \r\n\ del\ tipo\ "[]".\ No\ requiere\ parametros.\r\n
comment12.params=textoABuscar
comment12.target=boolean\ existeTareaConElTexto(java.lang.String)
comment12.text=\r\n\ Metodo\ 'existeTareaConElTexto'\ que\ devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\ contenga\ \r\n\ el\ texto\ indicado\ como\ parametro,\ false\ en\ caso\ contrario.\ Hay\ que\ hacerlo\ con\ bucle\ for-each.\r\n\ Requiere\ de\ parametro\ de\ tipo\ String\ con\ el\ texto\ a\ buscar.\r\n
comment2.params=tarea
comment2.target=void\ agregarTarea(java.lang.String)
comment2.text=\r\n\ Metodo\ 'agregarTarea'\ que\ agrega\ una\ tarea\ al\ final\ de\ la\ lista.\r\n\ Requiere\ un\ parametro\ de\ tipo\ String\ con\ el\ contenido\ de\ la\ tarea.\r\n
comment3.params=
comment3.target=java.lang.String\ devolverTareas()
comment3.text=\r\n\ M\u00E9todo\ 'devolverTareas'\ que\ devuelve\ un\ String\ con\ todas\ las\ tareas,\ una\r\n\ en\ cada\ l\u00EDnea.\ Si\ no\ hay\ tareas,\ esa\ l\u00EDnea\ contiene\ la\ cadena\r\n\ vac\u00EDa.\ No\ requiere\ parametros.\r\n
comment4.params=
comment4.target=int\ getNumeroTareas()
comment4.text=\r\n\ Metodo\ 'getNumeroTareas'\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ existentes.\ No\ requiere\ par\u00E1metros.\r\n
comment5.params=
comment5.target=int\ getNumeroTareas2()
comment5.text=\r\n\ Metodo\ 'getNumeroTareas2'\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ actuales\ y\ no\ requiere\ par\u00E1metros.\ No\ se\ puede\ usar\ el\ metodo\ size\ de\ la\r\n\ clase\ ArrayList.\r\n
comment6.params=
comment6.target=java.lang.String\ getTareaMasAntigua()
comment6.text=\r\n\ Metodo\ 'getTareaMasAntigua'\ que\ devuelve\ la\ primera\ tarea\ que\ se\ agrego\ \r\n\ al\ gestor\ de\ tareas;\ si\ no\ tareas\ devuelve\ la\ cadena\ vacia.\ No\ requiere\r\n\ parametros.\r\n
comment7.params=
comment7.target=void\ imprimirTareaMasAntigua()
comment7.text=\r\n\ Metodo\ 'imprimirTareaMasAntigua'\ que\ imprime\ la\ primera\ tarea\ que\ se\ agrego\r\n\ al\ gestor\ de\ tareas;\ si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\ en\ blanco.\ No\r\n\ requiere\ parametros.\r\n
comment8.params=
comment8.target=java.lang.String\ getListadoTareas()
comment8.text=\r\n\ Metodo\ 'getListadoTareas'\ que\ devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ \r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa.\r\n\ No\ requiere\ parametros.\r\n
comment9.params=
comment9.target=void\ imprimirListadoTareas()
comment9.text=\r\n\ Metodo\ 'imprimirListadoTareas'\ que\ imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\ \r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\ en\ blanco.\ \r\n\ El\ m\u00E9todo\ no\ devuelve\ nada.\ No\ requiere\ parametros.\r\n
numComments=13
