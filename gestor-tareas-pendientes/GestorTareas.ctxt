#BlueJ class context
comment0.target=GestorTareas
comment1.params=
comment1.target=GestorTareas()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ GestorTareas\r\n
comment10.params=
comment10.target=java.lang.String\ getTareasEnUnaSolaLinea()
comment10.text=\r\n\ Metodo\ 'getTareasEnUnaSolaLinea'\ que\ devuelve\ todas\ las\ tareas\ pendientes\ en\ una\ sola\ \r\n\ linea\ separadas\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corchetes\ al\ inicio\ y\ al\ final\r\n\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3]".\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ "[]".\ \r\n
comment11.params=
comment11.target=void\ imprimirTareasEnUnaSolaLinea()
comment11.text=\r\n\ Metodo\ 'imprimirTareasEnUnaSolaLinea'\ que\ imprime\ todas\ las\ tareas\ pendientes\ en\ una\ sola\ \r\n\ linea\ separadas\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corcehete\ al\ inicio\ y\ al\ final\r\n\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3].\ Si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\ con\ dos\ corchetes\ \r\n\ del\ tipo\ "[]".\ No\ requiere\ parametros.\r\n
comment12.params=textoABuscar
comment12.target=boolean\ existeTareaConElTexto(java.lang.String)
comment12.text=\r\n\ Metodo\ 'existeTareaConElTexto'\ que\ devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\ contenga\ \r\n\ el\ texto\ indicado\ como\ parametro,\ false\ en\ caso\ contrario.\ Hay\ que\ hacerlo\ con\ bucle\ for-each.\r\n\ Requiere\ de\ parametro\ de\ tipo\ String\ con\ el\ texto\ a\ buscar.\r\n
comment13.params=
comment13.target=java.lang.String\ getTareasImportantes()
comment13.text=\r\n\ Metodo\ getTareasImportantes\:\r\n\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\ (importante)\\\\n3.\ Estudiar\ (Importante)\\\\n")\ \r\n\ siempre\ que\ la\ tarea\ contenga\ la\ palabra\ "importante"\ \r\n\ (que\ puede\ aparecer\ en\ may\u00FAsculas\ o\ en\ min\u00FAsculas).\ \r\n\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ devuelve\ la\ cadena\ vac\u00EDa\r\n
comment14.params=
comment14.target=void\ imprimirTareasImportantes()
comment14.text=\r\n\ Metodo\ imprimirTareasImportantes\:\r\n\ Imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\ (importante)\\\\n3.\ Estudiar\ (Importante)\\\\n")\ \r\n\ siempre\ que\ la\ tarea\ contenga\ la\ palabra\ "importante"\ \ \r\n\ (que\ puede\ aparecer\ en\ may\u00FAsculas\ o\ en\ min\u00FAsculas).\ \r\n\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ imprime\ una\ l\u00EDnea\ en\ blanco.\r\n
comment15.params=
comment15.target=java.lang.String\ getTareasImpares()
comment15.text=\r\n\ Metodo\ getTareasImpares\:\r\n\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\\\\n3.Estudiar\\\\n")\ siempre\ que\ la\ tarea\ ocupe\ una\ posici\u00F3n\r\n\ impar.\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ devuelve\ la\ cadena\ vac\u00EDa.\r\n
comment16.params=
comment16.target=void\ imprimirTareasImpares()
comment16.text=\r\n\ Metodo\ imprimirTareasImpares\:\r\n\ Imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama")\ siempre\ que\ la\ tarea\ ocupe\ una\ posici\u00F3n\r\n\ impar.\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ imprime\ una\ l\u00EDnea\ en\ blanco.\r\n
comment17.params=posicion
comment17.target=boolean\ eliminarTarea(int)
comment17.text=\r\n\ Metodo\ 'eliminarTarea'\r\n\ Elimina\ la\ tarea\ cuya\ numeraci\u00F3n\ obtenida\ al\ listar\ las\ tareas\ coincide\r\n\ con\ el\ parametro\ indicado.\r\n\ Devuelve\ true\ si\ la\ tarea\ existe\ y\ se\ elimina\ y\ false\ en\ caso\ contrario\r\n
comment18.params=tareaABuscar
comment18.target=java.lang.String\ getPrimeraTareaConElTexto(java.lang.String)
comment18.text=\r\n\ Metodo\ 'getPrimeraTareaConElTexto'\r\n\ Devuelve\ un\ String\ conteniendo\ la\ primera\ tarea\ que\ contenga\ el\ texto\r\n\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\ coincidencia\r\n\ devuelve\ la\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\ for-each.\r\n
comment19.params=
comment19.target=java.lang.String\ getListadoTareasWhile()
comment19.text=\r\n\ Metodo\ 'getListadoTareasWhile'\r\n\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\ \r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\r\n\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\ while.\r\n
comment2.params=textoTarea
comment2.target=void\ agregarTarea(java.lang.String)
comment2.text=\r\n\ Metodo\ 'agregarTarea'\ que\ agrega\ una\ tarea\ al\ final\ de\ la\ lista.\r\n\ Requiere\ un\ parametro\ de\ tipo\ String\ con\ el\ contenido\ de\ la\ tarea.\r\n
comment20.params=
comment20.target=void\ imprimirListadoTareasWhile()
comment20.text=\r\n\ Metodo\ 'imprimirListadoTareasWhile'\r\n\ Imprime\ por\ pantalla\ todas\ las\ tareas\r\n\ pendientes,\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\r\n\ punto\ y\ un\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\r\n\ imprime\ una\ l\u00EDnea\ en\ blanco.\ El\ m\u00E9todo\ no\ devuelve\ nada.\r\n
comment21.params=tareaABuscar
comment21.target=java.lang.String\ getPrimeraTareaConElTextoWhile(java.lang.String)
comment21.text=\r\n\ Metodo\ 'getPrimeraTareaConElTextoWhile'\r\n\ Devuelve\ un\ String\ conteniendo\ la\ primera\r\n\ tarea\ que\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\r\n\ ninguna\ coincidencia\ devuelve\ la\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\r\n\ while.\ La\ coincidencia\ tiene\ que\ ser\ case-sensitive.\ El\ metodo\ debe\r\n\ ser\ lo\ mas\ eficiente\ posible\ (si\ hay\ un\ bucle\ no\ debe\ dar\ vueltas\ innecesarias)\r\n
comment22.params=tareaABuscar
comment22.target=void\ imprimePrimeraTareaConTextoWhile(java.lang.String)
comment22.text=\r\n\ Metodo\ 'imprimePrimeraTareaConTextoWhile'\r\n\ Imprime\ por\ pantalla\ la\ primera\ tarea\r\n\ que\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\r\n\ coincidencia\ imprime\ una\ l\u00EDnea\ en\ blanco.\ La\ coincidencia\ tiene\ que\ ser\r\n\ case-sensitive.\r\n
comment23.params=n
comment23.target=java.lang.String\ getPrimerasTareas(int)
comment23.text=\r\n\ Metodo\ 'getPrimerasTareas'\r\n\ Devuelve\ un\ String\ conteniendo\ las\ primeras\ n\ tareas\r\n\ (siendo\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea\ con\ su\ n\u00FAmero\ delante.\r\n\ En\ caso\ de\ que\ no\ haya\ suficientes\ se\ devuelven\ solo\ las\ que\ haya.\ En\ caso\ de\r\n\ no\ haber\ tareas\ se\ devuelve\ la\ cadena\ vac\u00EDa.\r\n
comment24.params=n
comment24.target=void\ imprimePrimerasTareas(int)
comment24.text=\r\n\ Metodo\ 'imprimePrimerasTareas'\r\n\ Imprime\ por\ pantalla\ las\ primeras\ n\ tareas\ (siendo\r\n\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea\ con\ su\ n\u00FAmero\ delante.\ En\ caso\r\n\ de\ que\ no\ haya\ suficientes\ se\ imprimen\ solo\ las\ que\ haya.\ En\ caso\ de\ no\ haber\r\n\ tareas\ se\ imprime\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada\ y\ debe\ usar\r\n\ el\ m\u00E9todo\ anterior\r\n
comment25.params=texto
comment25.target=boolean\ hayTareaConElTextoEficiente(java.lang.String)
comment25.text=\r\n\ Metodo\ 'hayTareaConElTextoEficiente'\r\n\ Devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\r\n\ contenga\ el\ texto\ indicado\ como\ par\u00E1metro\ y\ false\ en\ caso\ contrario.\ El\r\n\ metodo\ se\ debe\ ejecutar\ de\ la\ forma\ mas\ rapida\ posible\r\n
comment26.params=texto
comment26.target=java.lang.String\ getTareasConElTexto(java.lang.String)
comment26.text=\r\n\ Metodo\ 'getTareasConElTexto'\r\n\ Devuelve\ un\ String\ conteniendo\ todas\ las\ tareas\ que\r\n\ contienen\ el\ texto\ indicado\ como\ parametro,\ una\ en\ cada\ linea\ (sin\ n\u00FAmero\r\n\ asociado).\ El\ String\ devuelto\ contiene\ una\ ultima\ linea\ adicional\ que\ indica\r\n\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\ "No\ se\ encontraron\ coincidencias".\r\n\ La\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment27.params=texto
comment27.target=void\ imprimirTareasConElTexto(java.lang.String)
comment27.text=\r\n\ Metodo\ 'imprimirTareasConElTexto'\r\n\ Muestra\ por\ pantalla\ todas\ las\ tareas\ que\r\n\ contienen\ el\ texto\ indicado\ como\ parametro,\ una\ en\ cada\ linea.\ Se\ imprime\ una\r\n\ ultima\ linea\ adicional\ que\ indica\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\r\n\ "No\ se\ encontraron\ coincidencias"\ si\ no\ hay\ ninguna\ que\ contenga\ el\ texto.\ La\r\n\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment28.params=texto
comment28.target=boolean\ eliminaPrimeraTareaConElTexto(java.lang.String)
comment28.text=\r\n\ Metodo\ 'eliminaPrimeraTareaConElTexto'\r\n\ Elimina\ la\ primera\ tarea\ que\ contiene\ el\r\n\ texto\ indicado\ por\ par\u00E1metro.\ Devuelve\ true\ si\ se\ elimin\u00F3\ una\ tarea\ o\ false\r\n\ en\ caso\ contrario.\ Hay\ que\ hacerlo\ lo\ mas\ eficiente\ posible\r\n
comment29.params=texto
comment29.target=int\ eliminaTodasLasTareasConElTexto(java.lang.String)
comment29.text=\r\n\ Metodo\ 'eliminaTodasLasTareasConElTexto'\r\n\ Elimina\ todas\ las\ tareas\ que\ contienen\ un\r\n\ texto\ pasado\ como\ parametro.\ Devuelve\ el\ numero\ de\ tareas\ eliminadas.\ Hay\ que\r\n\ hacerlo\ con\ un\ bucle\ while.\r\n
comment3.params=
comment3.target=java.lang.String\ devolverTareas()
comment3.text=\r\n\ M\u00E9todo\ 'devolverTareas'\ que\ devuelve\ un\ String\ con\ todas\ las\ tareas,\ una\r\n\ en\ cada\ l\u00EDnea.\ Si\ no\ hay\ tareas,\ esa\ l\u00EDnea\ contiene\ la\ cadena\r\n\ vac\u00EDa.\ No\ requiere\ parametros.\r\n
comment30.params=n\ tarea
comment30.target=boolean\ editarTarea(int,\ Tarea)
comment30.text=\r\n\ Metodo\ 'editarTarea'\r\n\ Modifica\ el\ texto\ de\ la\ tarea\ indicada\ cuyo\ numero\ al\r\n\ listarla\ coincide\ con\ el\ pasado\ como\ primer\ parametro\ dejando\ el\ texto\r\n\ indicado\ en\ el\ segundo\ par\u00E1metro.\ Si\ la\ operaci\u00F3n\ tiene\ exito\ devuelve\r\n\ true;\ false\ en\ caso\ contrario.\r\n
comment4.params=
comment4.target=int\ getNumeroTareas()
comment4.text=\r\n\ Metodo\ 'getNumeroTareas'\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ existentes.\ No\ requiere\ par\u00E1metros.\r\n
comment5.params=
comment5.target=int\ getNumeroTareas2()
comment5.text=\r\n\ Metodo\ 'getNumeroTareas2'\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ actuales\ y\ no\ requiere\ par\u00E1metros.\ No\ se\ puede\ usar\ el\ metodo\ size\ de\ la\r\n\ clase\ ArrayList.\r\n
comment6.params=
comment6.target=java.lang.String\ getTareaMasAntigua()
comment6.text=\r\n\ Metodo\ 'getTareaMasAntigua'\ que\ devuelve\ la\ primera\ tarea\ que\ se\ agrego\ \r\n\ al\ gestor\ de\ tareas;\ si\ no\ tareas\ devuelve\ la\ cadena\ vacia.\ No\ requiere\r\n\ parametros.\r\n
comment7.params=
comment7.target=void\ imprimirTareaMasAntigua()
comment7.text=\r\n\ Metodo\ 'imprimirTareaMasAntigua'\ que\ imprime\ la\ primera\ tarea\ que\ se\ agrego\r\n\ al\ gestor\ de\ tareas;\ si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\ en\ blanco.\ No\r\n\ requiere\ parametros.\r\n
comment8.params=
comment8.target=java.lang.String\ getListadoTareas()
comment8.text=\r\n\ Metodo\ 'getListadoTareas'\ que\ devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ \r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa.\r\n\ No\ requiere\ parametros.\r\n
comment9.params=
comment9.target=void\ imprimirListadoTareas()
comment9.text=\r\n\ Metodo\ 'imprimirListadoTareas'\ que\ imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\ \r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ imprime\ una\ l\u00EDnea\ en\ blanco.\ \r\n\ El\ m\u00E9todo\ no\ devuelve\ nada.\ No\ requiere\ parametros.\r\n
numComments=31
